Design Decisions
-----------------------------------------------------------------------
Jeremiah Thomas:4145047
Kyle Michaels:3914066


General Overview
-----------------------------------------------------------------------
To the outside world all of our Schedulers operate as follows:
* A new queue is create by Scheduler
* setPriority is called to determine the initial priority of a thread 
* Then, a thread is put into the queue using waitForAccess.
* to acquire the next thread, nextThread is called

If the priority of a thread was not set, it is imediately assigned
the maxPriorityValue (lowest priority).  This is because it is the only
deterministic priority value set by the .conf file.

To track priority we decided to use a modified version of the ThreadState
class from Priority Scheduler.  It keeps track of the thread, its priority,
and some other statistics such as run/wait time.  We did this so that all the
information for a thread would be held in one place that the Scheduler could access.
The important information added is priority, start time, run time, and wait time.
These statistics give us the information needed to log a thread as well calculate
the Effective Priority of an aging thread.

Data Structure:
We decided to use ArrayLists to implement the queue.  The Scheduler classes use
an ArrayList to store thread states for all threads created in that Scheduler.
The Queue classes use ArrayLists to store thread states to implement the proper queues.
Each queue (Queue ArrayList) is sorted by inserting ThreadStates at the correct location
according to which Scheduler is being used (RoundRobin vs Priority order). The reason
for ArrayLists is that there are simple to implement insertions, deletions, and scanning.



StaticPriorityScheduler
------------------------------------------------------------------------
static operation description

Wut else?


DynamicPriorityScheduler
------------------------------------------------------------------------
dp description

How we age?

Why don't we need to reorganize?


MultiLevelScheduler
------------------------------------------------------------------------
ml description

How are multiple levels determined?



Modifications to Nachos
-------------------------------------------------------------------------
Kthread:
getID()

selfTest mods


Machine:


